/*
 * This file is generated by jOOQ.
 */
package jooq.generated.tables;


import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.WalletsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Collection;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Wallets extends TableImpl<WalletsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.wallets</code>
     */
    public static final Wallets WALLETS = new Wallets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletsRecord> getRecordType() {
        return WalletsRecord.class;
    }

    /**
     * The column <code>public.wallets.id</code>.
     */
    public final TableField<WalletsRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.wallets.created_at</code>.
     */
    public final TableField<WalletsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.wallets.updated_at</code>.
     */
    public final TableField<WalletsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.wallets.balance</code>.
     */
    public final TableField<WalletsRecord, BigDecimal> BALANCE = createField(DSL.name("balance"), SQLDataType.NUMERIC.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.NUMERIC)), this, "");

    private Wallets(Name alias, Table<WalletsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Wallets(Name alias, Table<WalletsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.wallets</code> table reference
     */
    public Wallets(String alias) {
        this(DSL.name(alias), WALLETS);
    }

    /**
     * Create an aliased <code>public.wallets</code> table reference
     */
    public Wallets(Name alias) {
        this(alias, WALLETS);
    }

    /**
     * Create a <code>public.wallets</code> table reference
     */
    public Wallets() {
        this(DSL.name("wallets"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WalletsRecord> getPrimaryKey() {
        return Keys.WALLETS_PKEY;
    }

    @Override
    public Wallets as(String alias) {
        return new Wallets(DSL.name(alias), this);
    }

    @Override
    public Wallets as(Name alias) {
        return new Wallets(alias, this);
    }

    @Override
    public Wallets as(Table<?> alias) {
        return new Wallets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(String name) {
        return new Wallets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(Name name) {
        return new Wallets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallets rename(Table<?> name) {
        return new Wallets(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Condition condition) {
        return new Wallets(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallets where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallets whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
